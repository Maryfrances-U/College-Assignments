/*   Maryfrances Umeora, Ethan Yang
     BBID: mumeora, eyang13
     Email: mumeora@u.rochester.edu, eyang13@u.rochester.edu
     TA Name: Linan Li, Bartlomiej Jezierski
*/

import java.io.IOException;
import java.io.PrintWriter;

//I referenced GeeksforGeeks to create the radix() method. URL: https://www.geeksforgeeks.org/radix-sort/
//the Stopwatch class is taken from Lab 6

public class RadixSort {
	
	//the Stopwatch class is what allows us to measure the run time
	class Stopwatch { 

	    private final long start;

	    /**
	     * Initializes a new stopwatch.
	     */
	    public Stopwatch() {
	        start = System.currentTimeMillis();
	    } 
	    
	    public double elapsedTimeMillis() {
	        long now = System.currentTimeMillis();
	        return (now - start) /1.0;
	    }	    
	} //end of Stopwatch class
		
	
	
	
	
	//this method takes in a number, and returns the digit at the specified location (using division)
	public static int getDigit (int input, int exponent) { 
		
		//if the number is less than 10^(whatever exponent) then we return 0 because this means that the digit at the 10^(exponent)'s place is 0
		//for example, if the input is 99, and we are checking the 100th's place, then it would see that 99 < 10^2, so outputs 0
		if (input < Math.pow(10, exponent-1)) {
			return 0; 
		}
		
		//here is where we continuously divide the number by 10 until we get a remainder
		int tempVar = input; 
			while (tempVar > 10) {
				//we get a remainder
				//for example, if we want the 100ths digit, and the input is 9876, we cut it down to 876 in this step
				tempVar = (int) (tempVar%(Math.pow(10, exponent)));
				//and then we subtract that remainder by the subsequent numbers that follow 
				//for example, if we want the 100ths digit, and the input is 876, we subtract 876 - (876%10^0) = 870, then 870 - (870%10^1) = 800
				for (int i = 0; i < exponent; i ++) {
					tempVar = tempVar - (int) (tempVar%(Math.pow(10, i)));
				}				
				//lastly, we divide the resulting number by 10^(exponent - 1) to get the digit
				//for example, if the number is now 800, and we want the hundredth place, we divide 800/10^2 = 8
				tempVar = (int) (tempVar / Math.pow(10, exponent-1)); 
			}
		return tempVar;
	} //end of getDigit() method
	
	
	
	
	
	
	//Divisionradix() method is called when doing the normal radix sorting
	public static void Divisionradix(int [] input) {
		
		int index; 
		int max = input[0]; 
		
		//finds the maximum number to get the number of digits
		for (index = 1; index < input.length; index ++) {
			if (max < input[index]) {
				max = input[index];
			}
		}
		
		int tempMax = max; 
		int maxDigits = 0; 
		//gets the number of digits of the max num
		while (tempMax >= 1) {
			tempMax = tempMax / 10; 
			maxDigits = maxDigits + 1; 
		}
		
		//this is the most important part: for every "exponent", the digit increases
		//for ex, exponent = 0 means we are focusing on the 1's digit, exponent = 1 means we are focusing on the 10's digit
		for (int exponent = 0; exponent <= maxDigits; exponent ++) {
			int [] output = new int [input.length]; 
			int [] count = new int [input.length]; 
			
			//goes thru each number and gets the digit at the specified index/exponent
			//increments the slot of that bin
			for (index = 0; index < input.length; index ++) {
				int digit = getDigit(input[index], exponent);
				count [digit] ++; 
			}
			
			
			for (index = 1; index < 10; index ++) {
	            count[index] += count[index - 1]; 
			}
			
			//now that we have the frequency of each digit, we put them into the correct slot in the output array. 
			//this allows us to "hold" the values inside each bin
			for (index = input.length - 1; index >= 0; index --) {
				int digit = getDigit(input[index], exponent);
				output[count[digit] - 1] = input[index]; 
				count [digit] --; 
			}
			
			//this is where we put the values back into the main array. 
			for (index = 0; index < input.length; index ++) {
				input[index] = output[index]; 
			}			
		}
	} //end of Divisionradix() method

	
	
	
	
	
	//getBit() method that takes in an integer and returns the bit (0/1) at the specified binary position
	public static int getBit(int input, int bitDigit) {
		int tempVar = input; 
		
		//we get rid of the digits behind of the digit we are interested in 
		//for ex, if we have 100111101, and we are looking at the 16 slot, 
		//then we get 100111101 >> 4, so we get 10011 left
		tempVar = tempVar >> bitDigit; 	
			
		
		//since 1 has the binary code of "1", then tempVar will only be 1 if it contains a "1" as its last binary digit
		//for ex: 17 has the binary code of 10001, so 17 & 1 = 1
		tempVar = tempVar & 1; 

		//always returns either a 0 or 1
		return tempVar;
	} //end of getBit() method
	
	
	
	
	
	
	
	//the binaryRadix() method is called when initiating the radix sorting using binary
	//takes in the array
	public static void Binaryradix(int [] input) {

		int index; 
		int max = input[0]; 
		
		//finds the maximum number to get the number of digits
		for (index = 1; index < input.length; index ++) {
			if (max < input[index]) {
				max = input[index];
			}
		}
		
		//gets the number of binary digits of the max num
		int maxDigits = Integer.toBinaryString(max).length(); 
		
		//this is the most important part: for every "bitDigit", the digit increases
		//for ex, bitDigit = 0 means we are focusing on the first binary digit, bitDigit = 1 means we are focusing on the second binary digit. 
		for (int bitDigit = 0; bitDigit <= maxDigits; bitDigit ++) {
			int [] output = new int [input.length]; 
			int [] count = new int [input.length]; 
			
			//goes thru each number and gets the digit at the specified index/exponent
			//increments the slot of that bin
			for (index = 0; index < input.length; index ++) {
				int digit = getBit(input[index], bitDigit);
				count [digit] ++; 
			}
			
			for (index = 1; index < 2; index ++) {
	            count[index] += count[index - 1]; 
			}
		
			//now that we have the frequency of each 0/1, we put them into the relative slot in the output array. 
			//this allows us to "hold" the values inside each bin
			for (index = input.length - 1; index >= 0; index --) {
				int digit = getBit(input[index], bitDigit);
				output[count[digit] - 1] = input[index]; 
				count [digit] --; 
			}
			
			//this is where we put the values back into the main array. 
			for (index = 0; index < input.length; index ++) {
				input[index] = output[index]; 
			}			
		}
	
	} //end of binaryRadix() method
	
	
	
	
	
	//print into file 
		public static void printArray(int [] input, String fileName) {
			PrintWriter fw = null;
			
			//the reason we printed out into text file is because when we tried to print onto console, the integers were invisible for some reason
			//this prints onto console. When I run it, the integers are invisible. 
			//it works when we use "println()" instead of "print()", but that becomes viewer unfriendly
			//I think it may be due to the large size of the array, somehow overloading the console
			
			try {
				fw = new PrintWriter(fileName);
				fw.println(fileName + ": "); 
				for (int b = 0; b < input.length; b++) {
					fw.println(input[b]); 
				}
			}
			catch (IOException e) {
				e.printStackTrace();
			} 
			fw.close();
		} //end of printArray() method
		
	
		
		
	//the main method
	public static void main(String[] args) {

		RadixSort main = new RadixSort();
		Stopwatch clock = main.new Stopwatch();
		
		int [] ArrayA1 = {0, 8765, 0, 3, 1, 65, 345, 67, 7654357, 945, 64, 7888, 765, 678, 764, 999, 96, 34, 56 ,42, 82, 75, 32, 17, 27, 17, 6, 18, 49, 34, 18, 41, 71, 87, 20, 25};
		int [] ArrayA2 = {0, 8765, 0, 3, 1, 65, 345, 67, 7654357, 945, 64, 7888, 765, 678, 764, 999, 96, 34, 56 ,42, 82, 75, 32, 17, 27, 17, 6, 18, 49, 34, 18, 41, 71, 87, 20, 25};
		int [] ArrayB1 = {320028, 245441, 67, 674, 0, 404650, 988282, 817, 929, 805423, 66,	175496,	483215,	758013,	660404,	957132,	68923,	116447,	510280,	393891,	510688,	378148,	377817,	251273,	825277,	158820,	817168, 705963, 749334, 237798, 554752, 75548, 74373, 661379, 495557, 785282, 932267, 955456, 362002};
		int [] ArrayB2 = {320028, 245441, 67, 674, 0, 404650, 988282, 817, 929, 805423, 66,	175496,	483215,	758013,	660404,	957132,	68923,	116447,	510280,	393891,	510688,	378148,	377817,	251273,	825277,	158820,	817168, 705963, 749334, 237798, 554752, 75548, 74373, 661379, 495557, 785282, 932267, 955456, 362002};
		int [] ArrayC1 = {54, 30, 57,	54,	37,	46,	26,	23,	86,	29,	41,	91,	83,	2,	24,	53,	59,	54,	90,	32,	11,	18,	16,	41,	4, 24,	5,0	,62,	28,	87,	89,	39,	94,	72,	26,	80,	2,	72,	15,	86,	62,	48,	47,	71,	2,0,	54,	97,	82,	64,	53,	4,	2,	42,	71,	53,	14,	79,	68,	40,	50,	77,	58,	54,	73,	8,	53,	47,	45,	43,	1,	28,	56,	64,	58,	60,	66,	37,	97,	74,	16,	13,	75,	50,	74,	37,	18,	69,	55,	42,	42,	2,2,	20,	71,	79,	22,	47,	94,	52,	24};
		int [] ArrayC2 = {54, 30, 57,	54,	37,	46,	26,	23,	86,	29,	41,	91,	83,	2,	24,	53,	59,	54,	90,	32,	11,	18,	16,	41,	4, 24,	5,0	,62,	28,	87,	89,	39,	94,	72,	26,	80,	2,	72,	15,	86,	62,	48,	47,	71,	2,0,	54,	97,	82,	64,	53,	4,	2,	42,	71,	53,	14,	79,	68,	40,	50,	77,	58,	54,	73,	8,	53,	47,	45,	43,	1,	28,	56,	64,	58,	60,	66,	37,	97,	74,	16,	13,	75,	50,	74,	37,	18,	69,	55,	42,	42,	2,2,	20,	71,	79,	22,	47,	94,	52,	24};
		int [] ArrayD1 = {};
		int [] ArrayD2 = {};
		int [] ArrayE1 = {};
		int [] ArrayE2 = {}; 
		
		
		double start = clock.elapsedTimeMillis();
		Divisionradix(ArrayA1); 
		double end = clock.elapsedTimeMillis() - start; 
		System.out.println("ArrayA DivisionRadix time ellapsed: " + end);

		start = clock.elapsedTimeMillis();
		Binaryradix(ArrayA2); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayA BinaryRadix time ellapsed: " + end);

		start = clock.elapsedTimeMillis();
		Divisionradix(ArrayB1); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayB DivisionRadix time ellapsed: " + end);
		
		start = clock.elapsedTimeMillis();
		Binaryradix(ArrayB2); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayB BinaryRadix time ellapsed: " + end);
	 
		start = clock.elapsedTimeMillis();
		Divisionradix(ArrayC1); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayC DivisionRadix time ellapsed: " + end);
		
		start = clock.elapsedTimeMillis();
		Binaryradix(ArrayC2); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayC BinaryRadix time ellapsed: " + end);
		
		start = clock.elapsedTimeMillis();
		Divisionradix(ArrayD1); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayD DivisionRadix time ellapsed: " + end);
		
		start = clock.elapsedTimeMillis();
		Binaryradix(ArrayD2); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayD BinaryRadix time ellapsed: " + end);
		
		start = clock.elapsedTimeMillis();
		Divisionradix(ArrayE1); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayE DivisionRadix time ellapsed: " + end);
		
		start = clock.elapsedTimeMillis();
		Binaryradix(ArrayE2); 
		end = clock.elapsedTimeMillis() - start; 		
		System.out.println("ArrayE BinaryRadix time ellapsed: " + end);
		
		//prints out the array into separate files 
		printArray(ArrayA1, "ArrayA1");
		printArray(ArrayA2, "ArrayA2"); 
		printArray(ArrayB1, "ArrayB1"); 
		printArray(ArrayB2, "ArrayB2"); 
		printArray(ArrayC1, "ArrayC1"); 
		printArray(ArrayC2, "ArrayC2"); 
		printArray(ArrayD1, "ArrayD1"); 
		printArray(ArrayD2, "ArrayD2"); 
		printArray(ArrayE1, "ArrayE1"); 
		printArray(ArrayE2, "ArrayE2"); 
				
	} //end of main method

}

